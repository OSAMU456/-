generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Content Palette specific fields
  spreadsheets  Spreadsheet[]
  snsAccounts   SnsAccount[]
  posts         Post[]
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Content Palette specific models
model Spreadsheet {
  id            String   @id @default(cuid())
  userId        String
  spreadsheetId String
  name          String
  url           String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  contents      Content[]
}

model Content {
  id            String      @id @default(cuid())
  spreadsheetId String
  rowIndex      Int
  text          String?
  imageUrl      String?
  scheduledDate DateTime?
  status        ContentStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  spreadsheet   Spreadsheet @relation(fields: [spreadsheetId], references: [id], onDelete: Cascade)
  posts         Post[]
}

model SnsAccount {
  id            String      @id @default(cuid())
  userId        String
  platform      SnsPlatform
  accountId     String
  accountName   String
  accessToken   String
  refreshToken  String?
  expiresAt     DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts         Post[]
}

model Post {
  id            String     @id @default(cuid())
  userId        String
  contentId     String
  snsAccountId  String
  postId        String?    // SNS platform post ID
  text          String
  imageUrl      String?
  scheduledAt   DateTime?
  postedAt      DateTime?
  status        PostStatus @default(SCHEDULED)
  
  // Analytics data
  likes         Int        @default(0)
  comments      Int        @default(0)
  shares        Int        @default(0)
  engagementRate Float?
  
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  content       Content    @relation(fields: [contentId], references: [id], onDelete: Cascade)
  snsAccount    SnsAccount @relation(fields: [snsAccountId], references: [id], onDelete: Cascade)
}

enum ContentStatus {
  PENDING
  SCHEDULED
  POSTED
  ERROR
}

enum PostStatus {
  SCHEDULED
  POSTING
  POSTED
  FAILED
}

enum SnsPlatform {
  TWITTER
  INSTAGRAM
  FACEBOOK
}